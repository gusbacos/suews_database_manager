# -*- coding: utf-8 -*-
"""
/***************************************************************************
 suews_database_manager
                                 A QGIS plugin
 Database manager for SUEWS parameter Database
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-09-01
        git sha              : $Format:%H$
        copyright            : (C) 2023 by University of Gothenburg
        email                : oskar.backlin@gu.se
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt.QtCore import QSettings, QTranslator, qVersion, QThread, QCoreApplication
from qgis.PyQt.QtWidgets import QAction, QMessageBox, QLabel, QLineEdit, QGridLayout, QVBoxLayout, QSpacerItem, QSizePolicy, QFileDialog
from qgis.PyQt.QtGui import QIcon, QImage, QPixmap
from qgis.core import QgsVectorLayer, QgsMapLayerProxyModel, QgsProject, QgsField, QgsVectorFileWriter

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .suews_database_manager_dialog import suews_database_managerDialog
import os.path


# Import tabs
from .tabs.urban_type_creator_tab import UrbanTypeCreator
from .tabs.urban_type_editor_tab import UrbanTypeEditor
from .tabs.urban_type_db_editor_tab import UrbanTypeDBEditor
from .tabs.urban_elements_creator_tab import UrbanElementsCreator
from .tabs.urban_ref_manager import UrbanRefManager
from .tabs.urban_profiles import ProfileCreator
from .tabs.urban_irrigation import Irrigation_manager
from .tabs.urban_anthropogenic_emission import AnthropogenicEmissionCreator
from .tabs.urban_country_creator import CountryCreator
from .tabs.urban_snow import SnowCreator
from .tabs.bulk_import import BulkImport
from .tabs.urban_SS import SS_creator
from .tabs.Spartacus_material import SpartacusMaterialCreator

from pathlib import Path
# import geopandas as gpd
import webbrowser

from .utilities.database_functions import *
from .utilities.reclassifier import setup_urban_type_creator
# from .utilities.type_editor import setup_urban_type_editor
from .utilities.suews_SS import setup_SUEWS_SS_creator
from .utilities.spartacus_material import setup_SS_material_creator
from .utilities.element_creator import setup_urban_elements_creator
from .utilities.table_editor import setup_urban_table_editor
from .utilities.profile_creator import setup_profile_creator
from .utilities.anthropogenic_emissions_creator import setup_anthropogenic_emission_manager

class suews_database_manager:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):


        
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'suews_database_manager_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)


        self.output_file_list = []

        self.dlg = suews_database_managerDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&suews_database_manager')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('suews_database_manager', message)
    
    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)
        
        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/suews_database_manager/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'SUEWS Database Manager'),
            callback=self.run,
            parent=self.iface.mainWindow())
         
        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&suews_database_manager'),
                action)
            self.iface.removeToolBarIcon(action)

    def setup_tabs(self):

        # self.dlg.tabWidget.clear()

        db_path = self.plugin_dir + '/data/database.xlsx' #C:/GitHub/suews_prepare_database/Input/database.xlsx' #TODO Set to UMEP Folder Path 
        db_dict = None
        db_dict = read_DB(db_path)
        # Type, veg, nonveg, water, ref, alb, em, OHM, LAI, st, cnd, LGP, dr, VG, ANOHM, BIOCO2, MVCND, por, reg, snow, AnEm, prof, ws, soil, ESTM, irr, country, type_id_dict = read_DB(db_path)

        urban_creator = UrbanTypeCreator()
        # self.setup_urban_type_creator(urban_creator, table_dict, Type, reg)
        setup_urban_type_creator(self,urban_creator, db_dict)
        self.dlg.tabWidget.addTab(urban_creator, 'Set Urban Types')

        # urban_editor = UrbanTypeEditor()
        # setup_urban_type_editor(self, urban_editor, db_dict, db_path)
        # self.dlg.tabWidget.addTab(urban_editor, 'Edit Urban Types')

        urban_elements_creator = UrbanElementsCreator()
        setup_urban_elements_creator(self, urban_elements_creator, db_dict, db_path)
        self.dlg.tabWidget.addTab(urban_elements_creator, 'Create Urban Elements')

        urban_db_editor = UrbanTypeDBEditor()
        setup_urban_table_editor(self, urban_db_editor, db_dict, db_path)
        self.dlg.tabWidget.addTab(urban_db_editor, 'Table Editor??')

        spartacus_creator = SS_creator()
        setup_SUEWS_SS_creator(self, spartacus_creator, db_dict, db_path)
        self.dlg.tabWidget.addTab(spartacus_creator, 'Building facets (Spartacus)')

        spartacus_material_creator = SpartacusMaterialCreator()
        setup_SS_material_creator(self, spartacus_material_creator, db_dict, db_path)
        self.dlg.tabWidget.addTab(spartacus_material_creator, 'Materials (Spartacus)')

        profile_creator = ProfileCreator()
        setup_profile_creator(self, profile_creator,db_dict, db_path)
        self.dlg.tabWidget.addTab(profile_creator, 'Profiles')

        anthropogenic_emission_creator = AnthropogenicEmissionCreator()
        setup_anthropogenic_emission_manager(self, anthropogenic_emission_creator, db_dict, db_path)
        self.dlg.tabWidget.addTab(anthropogenic_emission_creator, 'Emissions')

        irrigation_manager = Irrigation_manager()
        # self.setup_irrigation_manager(irrigation_manager, ref, irr)
        self.dlg.tabWidget.addTab(irrigation_manager, 'Irrigation')

        snow_creator = SnowCreator()
        # self.setup_snow_creator(snow_creator, ref, alb, em, OHM, ANOHM, snow, ESTM,)
        self.dlg.tabWidget.addTab(snow_creator, 'Snow')

        country_creator = CountryCreator()
        # self.setup_country_creator(country_creator, cnd, reg, country, snow, AnEm, prof, irr, ref, table_dict_pd)
        self.dlg.tabWidget.addTab(country_creator, 'Country')

        ref_manager = UrbanRefManager()
        # self.setup_ref_manager(ref_manager, ref)
        self.dlg.tabWidget.addTab(ref_manager, 'References')

        bulk_import = BulkImport()
        # self.setup_bulk_import(bulk_import, alb, em, OHM, LAI, st, cnd, LGP, dr, VG, ANOHM, BIOCO2, MVCND, por,  ws, soil, ESTM, prof, table_dict_pd, table_dict_ID)
        self.dlg.tabWidget.addTab(bulk_import, 'Bulk Import')

    def help():
        url = 'https://github.com/gusbacos/UTDB'
        # To readthedocs? 
        webbrowser.open_new_tab(url)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = suews_database_managerDialog()
            self.setup_tabs()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
